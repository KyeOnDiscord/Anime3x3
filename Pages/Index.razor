@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Json
@using System.Text.Json
@page "/"

<PageTitle>Index</PageTitle>

<h1>Kye's Anime 3x3 Maker</h1>
<br />

<div class="container">
    <div class="row">
        <div class="col">
            <label>Anime Name:</label>
            @if (SearchPlaceholder != null)
            {
                <input size=70% type="text" placeholder=@SearchPlaceholder @bind=InputSearch />
            }
            else
            {
                <input size=70% type="text" @bind="InputSearch" />
            }
            <br />
            <input @bind=@NSFW type="checkbox">
            <label>NSFW? 😳</label>
            <br />
            <button style="float:right" type="button" class="btn btn-primary" @onclick="Search">Search</button>

            @if (AnimeSearchResults != null && AnimeSearchResults.Count > 0)
            {
                <button style="float:right;margin-right:10px" type="button" class="btn btn-primary" @onclick="ClearSearch">Clear</button>
            }

            <br />
        </div>

        <div class="col"><button style="float:right;margin-right:10px" type="button" class="btn btn-danger" @onclick="ResetAll">Reset All</button></div>

    </div>
</div>

<br />

@if (AnimeSearchResults != null)
{
    <div class="container">

        <div class="row">

            <div class="col">
                <p>@AnimeSearchResults.Count results found</p>
                @foreach (var item in RemoveIfAlreadyInGrid(AnimeSearchResults))
                {
                    <img class="border border-secondary" @onclick="(() => SelectImage(item))" src="@item.ImageURL" style="object-fit:cover; margin:10px;margin-bottom:5px" height="150px" />
                }
            </div>
        </div>
    </div>
    <br />

}


<div class="container container-fluid">
    <h4>Preview:</h4>
    @do
    {
        GridCounter = 0;
    } while (false);

    @for (int i = 1; i <= Columns; i++)
    {

        <div class="row">
            @for (int j = 1; j <= Rows; j++)
            {
                var index = GridCounter;
                string className = "";
                @if (SelectedGrid == index)
                {
                    className += "border border-primary";
                }
                <div @onclick="(() => SelectCol(index))" class="col-md-3">
                    @do
                    {
                        GridCounter++;
                    } while (false);

                    <div class="card @className">
                        <img style="object-fit:cover;height:325px" src="@grid[index].ImageURL" class="card-img-top" alt="...">
                        <div class="card-footer bg-transparent border-secondary">
                            <a href="@grid[index].OpenLinkURL" target="_blank" style="text-decoration:none;font-family: 'Roboto', sans-serif;">@grid[index].Name</a>
                        </div>
                    </div>
                </div>


            }
        </div>
        <br />
    }
</div>

@code {

    private string? InputSearch { get; set; }
    private string? SearchPlaceholder { get; set; }

    private int GridCounter = 1;
    private int Rows = 3;
    private int Columns = 3;
    private int SelectedGrid = 0;

    private bool NSFW = false;

    class GridItem
    {
        public string ImageURL { get; set; } = "https://socialistmodernism.com/wp-content/uploads/2017/07/placeholder-image.png?w=640";
        public string OpenLinkURL { get; set; } = "#";
        public string Name { get; set; } = "";
    }

    private List<GridItem> grid = new();


    private List<GridItem> AnimeSearchResults { get; set; } = null;


    /// <summary>
    /// Returns grid items but removes items that are already in the grid.
    /// </summary>
    /// <param name="AnimeSearchResults">List of grid items</param>
    /// <returns></returns>
    private List<GridItem> RemoveIfAlreadyInGrid(List<GridItem> AnimeSearchResults)
    {
        List<GridItem> tmp = new();

        foreach (var item in AnimeSearchResults)
        {
            if (grid.Where(x => x.OpenLinkURL == item.OpenLinkURL).Count() == 0)
            {
                tmp.Add(item);
            }
        }

        return tmp;
    }

    private async Task<List<GridItem>> GetAnime(string input, bool SFW)
    {
        List<GridItem> response = new();
        var result = await API.MAL.MAL.GetAnime(input, SFW);

        foreach (var item in result.data)
        {
            if (item.members > 0)//Remove unapproved anime
            {
                GridItem curItem = new();
                curItem.ImageURL = item.images.webp.large_image_url;
                curItem.OpenLinkURL = item.url;
                if (item.title_english != null)
                    curItem.Name = item.title_english;
                else if (item.title != null)
                    curItem.Name = item.title;
                else if (item.title_japanese != null)
                    curItem.Name = item.title_japanese;

                response.Add(curItem);
            }

        }
        return response;
    }

    private async Task SelectCol(int index)
    {
        SelectedGrid = index;
    }

    private async Task SelectImage(GridItem gridItem)
    {
        grid[SelectedGrid] = gridItem;
    }

    private async Task Search() => AnimeSearchResults = await GetAnime(InputSearch, !NSFW);

    private async Task ClearSearch()
    {
        AnimeSearchResults = null;
        InputSearch = string.Empty;
    }

    private async Task ResetAll()
    {
        grid = new();
        await ClearSearch();
        await InitGrid();
        StateHasChanged();
    }

    private async Task InitGrid()
    {
        int listCount = Rows * Columns;//Define the size of our list
        for (int i = 0; i < listCount; i++)//Our list currently has 0 items so add a new grid item foreach grid.
        {
            grid.Add(new GridItem());
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await InitGrid();
        SearchPlaceholder = await API.MAL.MAL.GetRandomAnimeName();
    }
}
